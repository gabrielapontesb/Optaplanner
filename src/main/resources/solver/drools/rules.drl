import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import java.util.Set;
import java.util.ArrayList;

import dominio.Alocacao
import dominio.Disciplina
import dominio.Horario
import dominio.AlocacaoHorarioTurma

global HardMediumSoftScoreHolder scoreHolder;

/********************************* HARD CONSTRAINTS *********************************/
//restrições físicas

/*"Duas disciplinas nao podem estar alocadas no mesmo horário na mesma turma"*/
/*Uma turma só pode receber um professor no mesmo horario*/

rule "Em cada horário de uma turma só pode existir um professor na sala"
lock-on-active true
    when
        $a : Alocacao(
            $d : disciplina,
            $h : horario != null,
            $t : turma
        )

        //Verificando se existem dois professores diferentes na mesma turma/sala e no mesmo horario
        $total : Number( intValue >= 1 )
            from accumulate(
                Alocacao(
                    horario == $h,
                    horario != null,
                    turma == $t,
                    disciplina.professor.nome != $d.professor.nome
                ),

                init( int total = 0; ),
                action( total += 1;),
                result(total )
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


/*Um professor não pode estar alocado em mais de uma turma no mesmo horario*/
rule "Em um dado horário, cada professor está alocado em uma única turma"
lock-on-active true
    when
        $a : Alocacao(
            $h : horario != null,
            $d : disciplina,
            $t : turma
        )

        //Verificando se existe um mesmo professor alocado em mais de uma turma no mesmo horário
        $total : Number( intValue >= 1 )
            from accumulate(
                Alocacao(
                    disciplina.professor.nome == $d.professor.nome,
                    turma != $t,
                    horario != null,
                    horario == $h
                ),

                init( int total = 0; ),
                action( total += 1;),
                result(total )
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "Cada turma deve ter no máximo uma aula por dia com cada professor"
lock-on-active true
    when
        $a: Alocacao()

        Alocacao(
            $t : turma != null,
            $d : disciplina,
            $h : horario != null
        )

        //Verificando se existe mais uma alocacao para um professor no mesmo dia, na mesma turma e em horarios diferentes
        $total : Number(intValue > 1)
            from accumulate(
                Alocacao(
                    disciplina.professor.nome == $d.professor.nome,
                    horario != null,
                    horario.dia == $h.dia,
                    turma == $t
                ),
                init(int total = 0;),
                action(total += 1;),
                result(total)
            )

    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


//restrições pessoais
/*rule "O prof Geo 01 não pode dar as duas últimas aulas da sexta"
    when
        $a: Alocacao()

        Alocacao(
            $p : disciplina.professor.nome == "Geo 01",
            $h : horario != null, horario.dia == "sex", horario.id == 24 || horario.id == 25
        )

    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "O prof Geo 02 não pode dar aulas às segundas, quartas e quintas"
         when
             $a: Alocacao()

             Alocacao(
                 $p : disciplina.professor.nome == "Geo 02",
                 $h : horario != null, horario.dia == "seg" || horario.dia == "qua" || horario.dia == "qui"
             )

         then
             scoreHolder.addHardConstraintMatch(kcontext, -1);
     end*/


/*O prof Mat 1 não pode dar as últimas aulas 2 dias da semana ou mais*/
/*O prof Mat 1 pode dar as últimas aulas apenas em 1 dia da semana*/
/*rule "O prof Mat 01 precisa sair ao término da quarta aula pelo menos 2 dias na semana"
    when

        //Verificando se existe alguma alocacao para o prof Mat 1 na quinta aula em 2 dias ou mais
        Number(intValue >= 2)
        from accumulate(
            Alocacao(
                disciplina.professor.nome == "Mat 01",
                horario != null, horario.id == 5 || horario.id == 10 || horario.id == 15 || horario.id == 20 || horario.id == 25
            ),

            init(int total = 0;),
            action(total += 1;),
            result(total)
        )

    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end*/